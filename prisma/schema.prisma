// datasource and generator setup
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  STUDENT
  ADMIN
}

model User {
  id String @id @default(cuid())

  firstName String
  lastName  String
  email     String @unique
  password  String

  role UserRole @default(STUDENT)

  otp          String?
  otpExpiresAt DateTime?
  isVerified   Boolean   @default(false)

  accessToken  String?
  refreshToken String?

  testimonials Testimonial?

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  CourseReview CourseReview[]

  @@map("users")
}

model Testimonial {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  courseId  String
  rating    Int     @default(1)
  message   String
  isdisplay Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("testimonials")
}

model Contact {
  id String @id @default(cuid())

  name    String
  phone   String
  email   String
  message String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contacts")
}

model Blog {
  id String @id @default(cuid())

  title       String
  excerpt     String
  description String
  image       String
  category    String
  isDeleted   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blogs")
}

model Class {
  id String @id @default(cuid())

  className        String
  classDescription String
  isDeleted        Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subjects Subject[]

  @@map("classes")
}

model Subject {
  id      String @id @default(cuid())
  classId String
  class   Class  @relation(fields: [classId], references: [id], onDelete: Cascade)

  subjectName        String
  subjectDescription String
  banner             String
  isVisible          Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chapters Chapter[]

  @@map("subjects")
}

model Chapter {
  id String @id @default(cuid())

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  chapterName        String
  chapterDescription String
  thumbnail          String
  isDeleted          Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topic        Topic[]
  podcast      Podcast[]
  quiz         Quiz[]
  CourseReview CourseReview[]

  @@map("chapters")
}

model Topic {
  id        String  @id @default(cuid())
  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  topicName        String
  topicDescription String?
  topicVideo       String
  questionAnswer   Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  podcast Podcast[]

  @@map("topics")
}

model Podcast {
  id        String @id @default(cuid())
  chapterId String
  topicId   String

  podcastName    String
  podcastContent String

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  topic   Topic   @relation(fields: [topicId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("podcasts")
}

model Quiz {
  id String @id @default(cuid())

  chapterId       String
  quizName        String
  quizDescription String
  isDisable       Boolean @default(false)

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  Question  QuizQuestion?

  @@map("quizes")
}

model QuizQuestion {
  id String @id @default(cuid())

  quizId        String @unique
  questionText  String
  optionA       String
  optionB       String
  optionC       String
  optionD       String
  correctAnswer String

  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quizQuestions")
}

model CourseReview {
  id String @id @default(cuid())

  chapterId String
  useId     String
  rating    Int    @default(1)
  message   String

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [useId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("courseReviews")
}
